{"version":3,"file":"lexon-02341a62.js","sources":["../../../../node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: 'COMMENT'\r\n        // blockComment: ['COMMENT', '.'],\r\n    },\r\n    brackets: [['(', ')']],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: ':', close: '.' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '`', close: '`' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: ':', close: '.' }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region'),\r\n            end: new RegExp('^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    // defaultToken: 'invalid',\r\n    tokenPostfix: '.lexon',\r\n    ignoreCase: true,\r\n    keywords: [\r\n        'lexon',\r\n        'lex',\r\n        'clause',\r\n        'terms',\r\n        'contracts',\r\n        'may',\r\n        'pay',\r\n        'pays',\r\n        'appoints',\r\n        'into',\r\n        'to'\r\n    ],\r\n    typeKeywords: ['amount', 'person', 'key', 'time', 'date', 'asset', 'text'],\r\n    operators: [\r\n        'less',\r\n        'greater',\r\n        'equal',\r\n        'le',\r\n        'gt',\r\n        'or',\r\n        'and',\r\n        'add',\r\n        'added',\r\n        'subtract',\r\n        'subtracted',\r\n        'multiply',\r\n        'multiplied',\r\n        'times',\r\n        'divide',\r\n        'divided',\r\n        'is',\r\n        'be',\r\n        'certified'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // comment\r\n            [/^(\\s*)(comment:?(?:\\s.*|))$/, ['', 'comment']],\r\n            // special identifier cases\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'identifier.quote',\r\n                    bracket: '@open',\r\n                    next: '@quoted_identifier'\r\n                }\r\n            ],\r\n            [\r\n                'LEX$',\r\n                {\r\n                    token: 'keyword',\r\n                    bracket: '@open',\r\n                    next: '@identifier_until_period'\r\n                }\r\n            ],\r\n            ['LEXON', { token: 'keyword', bracket: '@open', next: '@semver' }],\r\n            [\r\n                ':',\r\n                {\r\n                    token: 'delimiter',\r\n                    bracket: '@open',\r\n                    next: '@identifier_until_period'\r\n                }\r\n            ],\r\n            // identifiers and keywords\r\n            [\r\n                /[a-z_$][\\w$]*/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'operator',\r\n                        '@typeKeywords': 'keyword.type',\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d*\\.\\d*\\.\\d*/, 'number.semver'],\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter']\r\n        ],\r\n        quoted_identifier: [\r\n            [/[^\\\\\"]+/, 'identifier'],\r\n            [/\"/, { token: 'identifier.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        space_identifier_until_period: [\r\n            [':', 'delimiter'],\r\n            [' ', { token: 'white', next: '@identifier_rest' }]\r\n        ],\r\n        identifier_until_period: [\r\n            { include: '@whitespace' },\r\n            [':', { token: 'delimiter', next: '@identifier_rest' }],\r\n            [/[^\\\\.]+/, 'identifier'],\r\n            [/\\./, { token: 'delimiter', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        identifier_rest: [\r\n            [/[^\\\\.]+/, 'identifier'],\r\n            [/\\./, { token: 'delimiter', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        semver: [\r\n            { include: '@whitespace' },\r\n            [':', 'delimiter'],\r\n            [/\\d*\\.\\d*\\.\\d*/, { token: 'number.semver', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [[/[ \\t\\r\\n]+/, 'white']]\r\n    }\r\n};\r\n"],"names":[],"mappings":"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"}